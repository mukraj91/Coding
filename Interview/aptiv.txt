1st Round :- 

> Implement Run time polymorphism.
> How to debug if thread crash
> Pointer vs Refererence
> Thread vs process
> How to communicate with process
> How to communicate wit thread
> Communication Protocall like (I2C, URAT, SPI) ?
> 






class BaseClass
{

public:

int a, b;

BaseClass()
{
   // BaseClass constructor
}


virtual ~BaseClass()
{
 // BaseClass destructor

}

BaseClass(const BaseClass& ref)
{
  a = ref.a;
  b = ref.b;
}

void fun1(int *ptr1, int ptr2)
{
  
 //cout<<"Base class logic"<<endl; 
 
 cout<<"Value of a and b : "<< a<<" "<< b << endl; 
} 



}; // closed BaseClass



class DeriveClass:  public BaseClass
{

public:

DeriveClass()
{
	// Derive class constructor
}

~DeriveClass()
{
	// Derive class destructor
}

 void fun1()
 {
   cout<<"Value of a and b : "<< a<<" "<< b << endl; 
 }
 
}; // closed DeriveClass





// main function.


int main()
{
	
	int p1 = 20, p2 = 40;
	
	//BaseClass * ptr = new DeriveClass();
	//ptr->fun1();
	
	BaseClass b1;
	
	b1.a = 5;
	b1.b = 10;
	
	
	BaseClass b2 = b1;
	b2.fun1(); // print value
	
	b1.a = 50;
	b1.b = 100;
	b2.fun1(); // print value
	
	b2.fun1( &p1, &p2); // print value
	
	
	return 0;
}




Protocall concepts(UART,I2C)

-------------------------------------------------------------------



Pointer vs Refererence.


int a = 9;

int &ref = a;

// Copy 

-------------------------------------------------------------------
vector<int>vec = {2, 4, 5, 6};


vec {2, 4, 5, 6, }

vec.size() = 5;
vec.capacity() = 8;


git <stac.lib> -a

int arr[10];

--------------------------------------------------------------------
