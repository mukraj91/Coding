
 Find a second higetst number in unsorted array?
 Reverse a bit of an interger?
 Write a program to find the middle of the linkedlist.
 Write a structure which having char and int variable.
 
  
 

#include<iostream>
#include<vector>
using namespace std;

/*

int main()
{

 cout<<"Find a second higetst number in unsorted array"<<endl;

 int first = 0, second = 0;
vector<int> arr{3, 5, 6, 8, 12, 10};

for(auto num : arr)
{
	if(num>first)
	{
		second = first;
		first = num;
	}
	else if(num>second)
	{
		second = num;
	}

}
cout<<"Second higest number: "<<second<<endl;


	return 0;
}
*/



// n = 6;

int findSecondHigestNumber(int array[] arr)
{
  int secondN;
  
    int n = array.lenght();
	int i;
	
	for( i = 0 ; i <n ; i++)
	{
	   if(arr[i] < arr[i+1]);
	   {  
	      temp = arr[i+1];

	   }	
	  
	  
	  if(prev > temp)
	  {
		  secondN = prev;
	
      }
	
	}

return secondN;
}


 (3) 
 
 
 
 #include<iostream>
 
 using namespace std;
 
 
 class Node
 {
	 public:
	 
	 int data;
	 Node* node;
	 Node(int data)
	 {
		 this->data = data;
	 }
	 
 };

class LinkedList
{
	Node *head = NULL;
	
	void push(int data);
	void print();
	void FindMiddleNode(Node *node);
	
};

void LinkedList::push(int data)
{
	Node * tempNode = new Node(data);
	tempNode->next = head;
	head = tempNode;
	
} // close push

void LinkedList::print()
{
	
	Node *temp = head;
	
	while(temp != NULL)
	{
		cout<<temp->data<<endl;
		temp = temp->next;
	}
	
	
}// close print

int LinkedList::FindMiddleNode(Node *node)
{
	
	int n = 0;
	Node * temp = node;
	
	while(temp != NULL)
	{
		n = n+1;
		temp = temp->next;		
	}
	
	for(i = 0 ; i <n/2 && temp! = NULL; i++)
	{   		
		temp = temp->next;
	}
	
	return temp->data;
}//FindMiddleNode


// main function


int main()
{
	LinkedList node; // Object created 
	
	node.push(100);
	node.push(200);
	node.push(300);	
	node.print();
	
	auto value = FindMiddleNode(node.head);
	
	return 0;
}


(4)

struct NXP
{
	char c;
	int i;
};

size_of(c) + padding 3 byte + soize_of(i); // * byte

1 . . . + 1 1 1 1

8bit -> 1 byte

// Bit field
// reentrant function.
// 















1 . . . + 1 1 1 1

8bit -> 1 byte

// Bit field
// reentrant function.
// semapore vs mutex
// Multithread vs Multiple

*/
