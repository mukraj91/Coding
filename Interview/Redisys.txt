Redisys : -


What is spenlock() ?
How to debug memeory fragmentation issue in HAL?
How the zygote working, how is starting the zygote.
Explain Android Boot process.
Communication beetween HAL and Kernel.
How to remove header from video stream, and only pass the buffer to decoder.
Can u explained how to split audio and video streams.
What is AGL, can u explain the OTA feature, which u haved worked.
What is .rc file in android ?
What is dmesg?
How to debug android issue?
How to analysed android issue?
Reverse the string ?
Why heap memory needed ?
Given an integer array nums, find the contiguous subarray (containing at least one number)
    which has the largest sum and return its sum.
	
	
 
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
 

-2, 1, -3, 4 = 0

1, -3, 4, -1 = 1

-3, 4, -1, 2 = 2

4, -1, 2, 1 = 6

-1, 2, 1, -5 = -3

2, 1, -5, 4 = 2




int main()
{
vector<int>  = {-2,1,-3,4,-1,2,1,-5,4};

int i, j;
int temp = 0
int sum;

for(i = v.begin(); i!= v.end(); i++)
{
   
  for( j = i+1 ; j!= v.end(); j++)
  {
    sum += j;
      
  }
    if(sum < temp)
	{
	  sum = temp;
    }

}

return sum;
}


1)factorial of n using recursion
#include<stdio.h>
main()
{
    int n;
    printf("Enter till where factorial needed");
    scanf("%d", &n);
    factorial(n);
}
void factorial(int n)
{
  int result;
  if(n>0)
  {
   result = n* factorial(n-1);
  }
  printf(Result is "%d", result);
}
2)using double pointer 3*4 matrix
#include<stdio.h>
main()
{
    int r=3, c=4, i, j, count=0;
    int **array = (int**)malloc(r*sizeof(int*));
    for(i=0; i<r; i++)
    {
      array[i] = (int*)malloc(c*sizeof(int));
    }
    for(i=0; i<r; i++)
    {
      for(j=0; j<c; j++)
      {
        array[i][j]=count++;
      }
    } 
    
}


3)thread1 -odd num
  thread2- even num
Till 100


#include<stdio.h>
#include<pthread_t>
int count=0;
int max=100;
void *odd_num(void *arg)
{
    pthread_t_mutex_lock(&mutex);
    while(count<max)
    {
       if(count % 2 != 0)
       {
         printf("%d", count);
       }
     count++
    }
    pthread_t_mutex_unlock(&mutex);
}
void *even_num(void *arg)
{
    pthread_t_mutex_lock(&mutex);
    while(count<max)
    {
       if(count % 2 == 0)
       {
         printf("%d", count);
       }
     count++
    }
    pthread_t_mutex_unlock(&mutex);
}









cha* RevString(char*ch)
{
  int len = strlen(ch);
  int i;
  char *result;
  char p;
   
   int j=0;
  if( i = len ; i> 0; i--)
  {   
     p = ch[i];  
       
      result[j] = p;
	  j++;  
  }

return result; 

}


int main()
{
   ch *ptr = "harman";
   cout<<RevString(ptr)<<endl;

return 0;
}


  























