https://github.com/Hussain1811/OS-concepts/blob/main/imp_questions.txt

To Watch all the OS video:- 

https://www.youtube.com/playlist?list=PLxCzCOWd7aiGz9donHRrE9I3Mwn6XdP8p


https://www.interviewbit.com/operating-system-interview-questions/



-----------------------------------------------------



Syllable of operating system:-

> Basic Introduction

-> Type of operating system
-> Process diagrams


-> Process scheduling(CPU scheduling)
    (FIFO, SJP, ROUNF ROBIN)

-> Process synchronization
   (Semaphore, Mutex)

-> Deadlock & threads
  

-> Memory management
     (Paging, segmentation, Fregmentation, 
      Virtula Memory, Page Replacement algo)



-> Disk Scheduling 
    (SSCAN, CSCAN, FCFS)

-> 


-> File management & Security
    (Sequence acess, random access, link access)



---------------------------
Introduction os OS:-

User -> Application -> Operating System -> Hardware

> Resouce Management
> Process Management(CPU Scheduling Algoritham)
> Storage Management
> Memory Management
> Security and Pravicy


System Call -> 


Throuput -> Number of task execute per unit time.

---------------------
Type of Operating System:-

> Batch -> Batch od similar job 
> Multi Programmed 
> Multitasking
> Real time OS
> Distributed 
> Clustred 
> Embedded

------------------------------------------
Multiprogrammed OS(Non - PreemPtive)
Multi tasking or time sharing (Preemptive)


-------------------------------------------
Real time OS -> (Hard -> Missile  
                 Soft  -> Gaming )

Distributed OS -> Connected machine with network
Clustered  -> Connect with some lane with single computer
Embedded -> Working with fixed micro web

---------------------------------------------
Process States(Process Lifecycle)

New(Created & Seconday memeory) -> Ready(RAM) -> Running -> Terminated 



> Long term schedulaer -> Take all the program in ready queue
> Dispatched schedulaer ->  Take from Ready queue to running queue
> Time quantum -> CUP run the process with fixed time
> Short term schedular -> used for Dispatched

-----------------------

Fork() -> To create a child process.

---------------------------

User Mode vs Kernel Mode
--------------------------------------

User Mode -> System call -> Kernel Mode

https://www.geeksforgeeks.org/difference-between-user-mode-and-kernel-mode/


-------------------------------------------

Process vs thread:
------------------
Process :- 

> System called invloved in the process
> Thread not using system call
----
> Operating system treats different process diffrentely
> All user level threads treates as single task for OS

------
> Different process have different copies of Data, files, code
> Thread share same copy of data and code
-----
> Process Context switching is slower
> Thread Context switching is faster

------
> Blocking a process will not block another process
> If thread is block the all the other thread will block

---------------------------------------------------------

User level Thread vs KErnel Level Thread

------
> User level thread manage by user level libray
> KErnel level thread are managed by OS(system call)
------
> User level thread are typically faster
> Kernel level thread are slower than user level
-----
Context switching is faster
Context switching is slower
-----
> If user level thread perform blocking operation then all other thread get blocked.
> If one kernel levek thread blocked, No effect on other threads

-------------------------------------------------------------------
Scheduling Algoritham:-
> Scheduling Algoritham is a way to selecting a process in ready queue and putiing in CPU.
> Ready queue inside RAM.
> Running queue means(CPU)

Pre-Emptive:- 
> (SRTF)Shorted Remaining time first
> (LRTF)Logest Remaining time first
> (RR)Round Robin 
> (PB)Priority based



Non-Preemptive
> FCFS(First come first serve)
> SJF(shorted job first)
> LJF(logest job first)
> HRRN(Higest Response Next)
> Multiple Queue

-------------------------------------------------
CPU Scheduling
-> Arrival time :- The time at which process enter at ready queue.
-> Burst time(Duration) :- Time required by a process to get executed on CUP
-> Completion time :- The time at which process completed it's execution

Turn Around time = Completion time - Arrival time
Waiting Time = Turn aroung time - Burst time

Response Time -> The time which a process get CPU first

-------------------------------------------------

Process Synchronizations:-













































> what is difference between multi tasking and multi threading CPU.
https://www.geeksforgeeks.org/difference-between-multi-tasking-and-multi-threading/

https://byjus.com/gate/difference-between-multi-tasking-and-multi-threading/


Multiprogramming -> Non=preemtive

Multitasking -> Preemtive(Time sharing )


What is multiprogramming? ->

A multiprogramming is a parallel processing in which the multiple programs can run simultaneously.
Multi programming is the ability of an os to execute multiple programs at the same time on single processor machine.




Bootstrap program and where is it stored?->
https://moviecultists.com/where-bootstrap-program-is-stored


A bootstrap program is the initial program that the computer runs when it is powered up or rebooted. 
It initializes all aspects of the system, from CPU registers to device controllers to memory contents. 
Typically, it is stored in read-only memory (ROM) or electrically erasable programmable read-only memory (EEPROM), 
known by the general term firmware, within the computer hardware.


What is bootstrap loader example?
A Bootstrap Loader (BSL) is a small program which can be activated immediately after a microcontroller has been powered up.



Booting Process :- 

The booting process loads the operating system from bootable device
like(Harddisk) into main memory(RAM) installed on your computer.



Power on Switch(CPU) -> Booting Process -> Login Screen


https://www.youtube.com/watch?v=FeQGe8_x0yE

6 Steps of Linux Booting Process

BIOS -> Basic Input/Output System.
         (Execute MBR)
 > Perform Integrity Check(POST -> Power On Self Test) process)
 > Check all the device well connected or not
 > Once all the device check is completed then BIOS search the bootable device.And it will read the firstsector of 
 the bootable device.
 > First sector conatan the information about MBR
 > MBR located in the 1st sector of the bootable disk.
 > Typically /dev/hda or /dev/sda
> Size of MBR(Master Boot Record(512 Byte))
 -------------------------------------------------------------------------------------
Primary Boot Loader(446 Bytes) + Partition Table(64 Bytes) + MBR (2 Bytes) = 512 Byes.
---------------------------------------------------------------------------------------


MBR  -> Master Boot Recorder
         (Execute GRUB)

-> Bootable device first sector is called MBR.
-> Once Booloader once search it will GRUB screen will show.




GRUM -> Grand Unified Bootloader
          (Execute Kernel)
> How many operating system has installed u can see in GRUB.
> once GRUM will store the kernel information.

KERNEL -> Kernel(Operating system)
          (Execute sbin/ init
> Kernel mount the root file system.
> Once kernel start its operation is executed.
/sbin/init process


Init  -> Init (systemd)
          (Execute Run level programs)

> Look at the etc/inittab file to decide the linux run level



Run Level -> Run Level program (A run level is a state of init and the whole system that defines what system services are operating.)
            (Execute from /etc/rc.d)

-> Run level decide which initial program are loaded at startup.

init 0  - > Halt ( The system can be safely powered off with no activity.)
init 1  - > Single user mode
init 2  - > Multiuser Mode , Without NFS((network file system).)
init 3  - > Full Multiuser mode (under the command line interface and not under the graphical user interface.)
init 4  - > Unused (User-definable.)
init 5  - > X11 (Multiple user mode under GUI (graphical user interface) and this is the standard runlevel for most of the LINUX based systems)
init 6  - > Reboot (Reboot which is used to restart the system.)


Note:- init is the program responsible for altering the run level which can be called using telinit command



2 core CPU with 3.6GHz speed is faster or 4 core CPU with 1.8GHz is faster?
--> 4 core CPU with 1.8GHz is faster(Multiple task run simultaneously, Multithread)






In a system with 2GB RAM, can a 4GB process run?

-> 



What is the PID of init?
-> 1 



How do you know the current state of a process?

-> ps command


What is PCB?

->  Process Control block (PCB) is used to track the process’s execution status.
> When the process makes a transition from one state to another, the operating system must update information in the process’s PCB.


Difference between physical and logical memory?



Physical Memory : 
This is the memory that is actually present and every process needs space here to execute their code.




logical memory?


Logical Address is generated by CPU while a program is running.
The logical address is virtual address as it does not exist physically, therefore, it is also known as Virtual Address.
The hardware device called Memory-Management Unit is used for mapping logical address to its corresponding physical address.



What is swapping?
> Swapping is a memory management scheme in which any process can be temporarily swapped from main memory to secondary memory 
   so that the main memory can be made available for other processes.



Advantages of Swapping ?

It helps the CPU to manage multiple processes within a single main memory.
It helps to create and use virtual memory.
Swapping allows the CPU to perform multiple tasks simultaneously. 
Therefore, processes do not have to wait very long before they are executed.
It improves the main memory utilization.





Fragmentation?
As the process is loaded and unloaded from memory, these areas are fragmented into small pieces of memory that cannot be allocated to incoming processes. It is called fragmentation.


Difference between Internal and External Fragmentation?

External fragmentation
Total memory space is enough to satisfy a request or to reside a process in it, but it is not contiguous so it can not be used


Internal fragmentation
Memory block assigned to process is bigger. Some portion of memory is left unused as it can not be used by another process.



How to solve internal fragmentation?
Best Fit Block Search is the solution for internal fragmentation.







Fit Block Search?
This method keeps the free/busy list in order by size – smallest to largest







How to solve external ? 
Compaction is the solution for external fragmentation.



Compaction?
Compaction is a process in which the free space is collected in a large memory chunk to make some space available for processes.





Paging ?

Paging is a storage mechanism that allows OS to retrieve processes from the secondary storage into the main memory in the form of pages.

In the Paging method, the main memory is divided into small fixed-size blocks of physical memory,
 which is called frames. 
 The size of a frame should be kept the same as that of a page to have maximum utilization of 
 the main memory and to avoid external fragmentation. Paging is used for faster access to data, and it is a logical concept.



---------------------------------


